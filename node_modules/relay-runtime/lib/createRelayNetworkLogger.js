/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createRelayNetworkLogger
 * 
 * @format
 */

'use strict';

/* eslint-disable no-console-disallow */

function createRelayNetworkLogger(LoggerTransaction) {
  return {
    wrapFetch: function wrapFetch(fetch, graphiQLPrinter) {
      return function (operation, variables, cacheConfig, uploadables) {
        var loggerTransaction = new LoggerTransaction({
          operation: operation,
          variables: variables,
          cacheConfig: cacheConfig,
          uploadables: uploadables
        });

        console.time && console.time(loggerTransaction.getIdentifier());

        var onSettled = function onSettled(error, response) {
          if (graphiQLPrinter) {
            loggerTransaction.addLog('GraphiQL', graphiQLPrinter(operation, variables));
          }
          loggerTransaction.addLog('Cache Config', cacheConfig);
          loggerTransaction.addLog('Variables', require('./prettyStringify')(variables));
          if (error) {
            loggerTransaction.addLog('Error', error);
          }
          if (response) {
            loggerTransaction.addLog('Response', response);
          }
          loggerTransaction.commitLogs(error, response);
        };

        var request = fetch(operation, variables, cacheConfig, uploadables);
        if (require('./isPromise')(request)) {
          request.then(function (response) {
            onSettled(null, response);
          }, function (error) {
            onSettled(error, null);
          });
        } else if (request instanceof Error) {
          onSettled(request, null);
        } else {
          onSettled(null, request);
        }
        return request;
      };
    },
    wrapSubscribe: function wrapSubscribe(subscribe, graphiQLPrinter) {
      return function (operation, variables, cacheConfig, _ref) {
        var _onCompleted = _ref.onCompleted,
            _onNext = _ref.onNext,
            _onError = _ref.onError;

        var onResponse = function onResponse(error, response, status) {
          var loggerTransaction = new LoggerTransaction({
            operation: operation,
            variables: variables,
            cacheConfig: cacheConfig
          });
          if (graphiQLPrinter) {
            loggerTransaction.addLog('GraphiQL', graphiQLPrinter(operation, variables));
          }
          loggerTransaction.addLog('Cache Config', cacheConfig);
          loggerTransaction.addLog('Variables', require('./prettyStringify')(variables));
          if (status) {
            loggerTransaction.addLog('Status', status);
          }
          if (error) {
            loggerTransaction.addLog('Error', error);
          }
          if (response) {
            loggerTransaction.addLog('Response', response);
          }
          loggerTransaction.commitLogs(error, response, status);
        };

        var subscription = subscribe(operation, variables, cacheConfig, {
          onCompleted: function onCompleted() {
            _onCompleted && _onCompleted();
            onResponse(null, null, 'subscription is unsubscribed.');
          },
          onNext: function onNext(payload) {
            _onNext && _onNext(payload);
            onResponse(null, payload, 'subscription receives update');
          },
          onError: function onError(error) {
            _onError && _onError(error);
            onResponse(error, null);
          }
        });
        onResponse(null, null, 'subscription is sent');
        return subscription;
      };
    }
  };
}

module.exports = createRelayNetworkLogger;