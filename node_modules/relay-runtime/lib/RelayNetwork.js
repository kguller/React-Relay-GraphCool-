/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule RelayNetwork
 * 
 * @format
 */

'use strict';

/**
 * Creates an implementation of the `Network` interface defined in
 * `RelayNetworkTypes` given a single `fetch` function.
 */
function create(fetch, subscribe) {
  function observe(operation, variables, cacheConfig, uploadables) {
    return observeStream(fetch, subscribe, operation, variables, cacheConfig, uploadables);
  }

  function request(operation, variables, cacheConfig, uploadables) {
    return observeFetch(fetch, operation, variables, cacheConfig, uploadables).map(function (payload) {
      return require('./normalizePayload')(operation, variables, payload);
    }).toPromise().then(require('fbjs/lib/nullthrows'));
  }

  function requestStream(operation, variables, cacheConfig, observer) {
    return observeStream(fetch, subscribe, operation, variables, cacheConfig).map(function (payload) {
      return require('./normalizePayload')(operation, variables, payload);
    }).subscribeLegacy(observer);
  }

  return {
    observe: observe,
    fetch: fetch,
    request: request,
    requestStream: requestStream
  };
}

function observeFetch(fetch, operation, variables, cacheConfig, uploadables) {
  var result = fetch(operation, variables, cacheConfig, uploadables);
  return require('./RelayObservable').from(result);
}

function observeStream(fetch, subscribe, operation, variables, cacheConfig, uploadables) {
  var subscribe_ = subscribe; // Tell Flow this function arg is const.
  if (operation.query.operation === 'subscription') {
    require('fbjs/lib/invariant')(subscribe_, 'The default network layer does not support GraphQL Subscriptions. ' + 'To use Subscriptions, provide a custom network layer.');

    require('fbjs/lib/invariant')(!uploadables, 'Cannot provide uploadables while subscribing.');

    return require('./RelayObservable').fromLegacy(function (observer) {
      return subscribe_(operation, variables, null, observer);
    });
  }

  var pollInterval = cacheConfig && cacheConfig.poll;
  if (pollInterval != null) {
    require('fbjs/lib/invariant')(!uploadables, 'Cannot provide uploadables while polling.');
    return observeFetch(fetch, operation, variables, { force: true }).poll(pollInterval);
  }

  return observeFetch(fetch, operation, variables, cacheConfig, uploadables);
}

module.exports = { create: create };